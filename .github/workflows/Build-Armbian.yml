name: "Build-Armbian"
on:
  schedule:
    - cron: '0 0 * * 2,5'
  workflow_dispatch:
    inputs:
    
      BOARD:
        type: choice
        description: 'Board'
        options:
        - som3588-cat
        - lemonpi-pi1
        default: 'lemonpi-pi1'
        
      BRANCH:
        type: choice
        description: 'Kernel branch'
        options:
        - edge
        - vendor
        - CNflysky
        default: 'vendor'
        
      DESKTOP:
        type: choice
        description: 'DESKTOP'
        options:
        - minimal
        - server
        - gnome
        - budgie
        - cinnamon
        - i3-wm
        - kde-neon
        - kde-plasma
        - mate
        - xfce
        - xmonad
        default: 'server'

      ENABLE_EXTENSIONS:
        type: choice
        description: "Armbian lists of extensions"
        options: [ 'mesa-vpu', ' ' ]
        default: " "

      DOCKER:
        type: choice
        description: 'yes = DOCKER, no = Actions'
        required: false
        options: [ 'yes', 'no' ]
        default: 'no'
      
      nightly:
        description: 'yes = nighlty, no = stable'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      ROOTFS:
        type: choice
        description: 'ROOTFS TYPE'
        options:
        - ext4
        - btrfs
        default: 'ext4'
          
env:
  TZ: Asia/Shanghai

jobs:
  Armbian:  
    runs-on: ubuntu-22.04  
    strategy:
      matrix:
        RELEASE: [jammy, noble, oracular, bookworm, bullseye]
    steps:
      - name: "Checkout Armbian board"
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          clean: false
          path: custom
          
      - name: "Checkout Armbian build"
        uses: actions/checkout@main
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build
          
      - name: "Checkout Armbian os"
        uses: actions/checkout@main
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os
    
      - name: Set Env
        shell: bash
        run: |
          sudo apt-get update
          #sudo apt-get install software-properties-common -y
          # 清理 Docker 镜像和软件缓存
          docker_images_ids=$(docker images -q)
          if [ -n "$docker_images_ids" ]; then
            docker rmi $docker_images_ids
          fi
          docker image prune -a -f
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E  apt-get autoclean
          sudo -E apt-get clean
          sudo -E  apt-get autoremove
          dpkg --list | grep "^rc"
          dpkg --list | grep "^rc" | cut -d " " -f 3
          dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs sudo dpkg --purge
          
          # userspace decode
          if [[ "${{ inputs.DESKTOP }}" == "minimal" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="yes"" >> $GITHUB_ENV
          elif [[ "${{ inputs.DESKTOP }}" == "server" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
          else
            echo "BUILD_DESKTOP="yes"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT="${{ inputs.DESKTOP }}"" >> $GITHUB_ENV
            echo "DESKTOP_APPGROUPS_SELECTED="browsers"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base"" >> $GITHUB_ENV
          fi

          # read version from upstream Armbian OS
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV
          echo "VERSIONOS=$(cat build/VERSION)" >> $GITHUB_ENV
          
          # read VERSION_OVERRIDE from upstream Armbian OS
          #cat os/stable.json | jq '.version' | sed "s/\"//g" | sed 's/^/ARMBIAN_VERSION=/' >> $GITHUB_ENV
          [[ "${{ inputs.armbian_version }}" != '' ]] && echo "ARMBIAN_VERSION=${{ inputs.armbian_version }}" >> $GITHUB_ENV
         
          # copy os userpatches
          mkdir -p  ./build/userpatches
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches

          # Add CNflysky kernel
          #sed -i '41r ./build/config/sources/families/CNflysky.txt' ./build/config/sources/families/rockchip-rk3588.conf
          # Add MAINTAINER
          sed -i '75i config/boards/lemonpi-pi1.conf		@YANXIAOXIH' ./build/.github/CODEOWNERS
          sed -i '75i config/boards/som3588-cat.conf		@YANXIAOXIH' ./build/.github/CODEOWNERS

      - name: Compile Armbian [ ${{ inputs.BOARD }} ${{ matrix.RELEASE }} ]
        shell: bash
        run: |
          # go to build folder
          cd ./build
          # execute build command
          ./compile.sh \
          BOARD="${{ inputs.BOARD }}" \
          BRANCH="${{ inputs.BRANCH }}" \
          RELEASE="${{ matrix.RELEASE }}" \
          KERNEL_CONFIGURE="no" \
          BUILD_DESKTOP="${{ env.BUILD_DESKTOP }}" \
          BUILD_MINIMAL="${{ env.BUILD_MINIMAL }}" \
          DESKTOP_ENVIRONMENT="${{ env.DESKTOP_ENVIRONMENT }}" \
          DESKTOP_APPGROUPS_SELECTED="${{ env.DESKTOP_APPGROUPS_SELECTED }}" \
          DESKTOP_ENVIRONMENT_CONFIG_NAME="${{ env.DESKTOP_ENVIRONMENT_CONFIG_NAME }}" \
          ENABLE_EXTENSIONS="${{ inputs.ENABLE_EXTENSIONS || ' '  }}" \
          BOARD_FIRMWARE_INSTALL="-full" \
          SHARE_LOG="yes" \
          BETA="${{ inputs.nightly }}" \
          PREFER_DOCKER="${{ inputs.DOCKER }}" \
          ROOTFS_TYPE="${{ inputs.ROOTFS }}" \
          EXPERT="yes" \
          VENDOR=Armbian \
          IMAGE_XZ_COMPRESSION_RATIO=8 \
          COMPRESS_OUTPUTIMAGE=sha,gpg,xz

      - name: "Generate body file"
        if: success()
        run: |
            echo "
              <p align='center'>
              <a href='https://www.armbian.com'>
              <img src='https://raw.githubusercontent.com/armbian/.github/master/profile/tux-two.png' width='400'></a></p>
              <h1 align=center>Armbian OS</h1>
              <p align=center>
              <a href='https://www.armbian.com'><img alt='Armbian Linux stable' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20current&query=CURRENT&color=f71000&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
              <a href='https://www.armbian.com'><img alt='Armbian Linux rolling' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20edge&query=EDGE&color=34be5b&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
              </p>
              <br>

              - Board: ${{ inputs.BOARD }} 
              - Kernel: ${{ inputs.BRANCH }} 
              - Verification: sha256sum 

              Please note that Armbian Rolling Releases are not recommended for production environments, as these builds are not thoroughly tested. However, in most cases, they should work well. 

              <br>
              &nbsp;
              </p>" > body.html

      - name: Upload Armbian to Release 
        uses: ncipollo/release-action@main
        if: success()
        with:
          tag: "Armbian_V${{ env.VERSIONOS }}"
          name: "Armbian_V${{ env.VERSIONOS }}"
          artifacts: "build/output/images/*"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "body.html"
