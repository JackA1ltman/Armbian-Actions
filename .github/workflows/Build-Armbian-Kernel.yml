name: "Armbian Build Kernel and Image"
on:
  workflow_dispatch:
    inputs:
    
      BRANCH:
        type: choice
        description: "Kernel branch to use for build"
        options:
        - edge
        - current
        - vendor
        default: 'vendor'
        
      DESKTOP:
        type: choice
        description: "Desktop environment selection"
        options:
        - minimal
        - server
        - gnome
        - budgie
        - cinnamon
        - i3-wm
        - kde-neon
        - kde-plasma
        - mate
        - xfce
        - xmonad
        default: 'server'

      ENABLE_EXTENSIONS:
        type: choice
        description: "Armbian extension packages"
        options: [ 'mesa-vpu', ' ' ]
        default: " "

      DOCKER:
        type: choice
        description: "Build type: yes = Docker, no = Actions"
        required: false
        options: [ 'yes', 'no' ]
        default: 'no'
      
      nightly:
        description: "Build type: yes = nightly, no = stable"
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      ROOTFS:
        type: choice
        description: "Root filesystem type"
        options:
        - ext4
        - btrfs
        default: 'ext4'


jobs:
  Build_Kernel: 
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BOARD: [ lemonpi, som3588-cat ] 

    outputs: 
      VERSIONOS: ${{ steps.set_env.outputs.VERSIONOS_VAL }}

    steps:
      - name: "Checkout Board Source"
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Checkout Build System"
        uses: actions/checkout@main
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build

      - name: "Checkout OS Source" 
        uses: actions/checkout@main
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Set Kernel Env"
        id: set_env
        shell: bash
        run: |
          # Update and clean the runner environment
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge || true

          # Set versioning environment variables
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV
          VERSIONOS_VALUE=$(cat build/VERSION)
          echo "VERSIONOS=${VERSIONOS_VALUE}" >> $GITHUB_ENV
          echo "VERSIONOS_VAL=${VERSIONOS_VALUE}" >> $GITHUB_OUTPUT # 设置步骤输出

          # Prepare user patches and board files
          mkdir -p ./build/userpatches
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches

          # Add board maintainer to CODEOWNERS (optional, if needed for this structure)
          sed -i '75i config/boards/${{ matrix.BOARD }}.conf		@YANXIAOXIH' ./build/.github/CODEOWNERS

      - name: "Compile Kernel: ${{ matrix.BOARD }} (${{ inputs.BRANCH }})" 
        shell: bash
        run: |
          cd ./build
          ./compile.sh \
            BOARD="${{ matrix.BOARD }}" \
            BRANCH="${{ inputs.BRANCH }}" \
            RELEASE="bookworm" \
            KERNEL_CONFIGURE="no" \
            BUILD_DESKTOP="no" \
            BUILD_MINIMAL="yes" \
            BOARD_FIRMWARE_INSTALL="-full" \
            SHARE_LOG="yes" \
            BETA="${{ inputs.nightly }}" \
            PREFER_DOCKER="${{ inputs.DOCKER }}" \
            EXPERT="yes" \
            VENDOR=Armbian

          echo "Listing original kernel packages in output/debs:"
          ls -l output/debs/

      - name: "Rename Kernel Debs" 
        shell: bash
        run: |
          echo "Attempting to rename kernel packages in build/output/debs/ for release"
          cd build/output/debs
          if ! ls linux-*.deb 1> /dev/null 2>&1; then
            echo "No kernel .deb files found in build/output/debs/ to rename. This might indicate a kernel compilation failure."
            exit 1
          fi
          for old_name in linux-*.deb; do
            if [ -f "$old_name" ]; then
              new_name=$(echo "$old_name" | sed -E 's/(linux-.*__[0-9]+\.[0-9]+\.[0-9]+)-.*(\.deb)$/\1..\2/')
              if [[ "$old_name" != "$new_name" ]]; then
                mv -v "$old_name" "$new_name"
                echo "Renamed '$old_name' to '$new_name'"
              else
                echo "Filename '$old_name' did not match expected pattern for renaming or is already in the desired format."
              fi
            fi
          done
          echo "Listing renamed kernel packages for release:"
          ls -l
          cd ../../.. 

      - name: "Create Kernel Build Summary"
        if: success()
        run: |
          mkdir -p release_info
          echo "### Kernel: ${{ matrix.BOARD }} (${{ inputs.BRANCH }})" > release_info/kernel_summary_${{ matrix.BOARD }}.md
          echo "- Board: ${{ matrix.BOARD }}" >> release_info/kernel_summary_${{ matrix.BOARD }}.md
          echo "- Kernel Branch: ${{ inputs.BRANCH }}" >> release_info/kernel_summary_${{ matrix.BOARD }}.md
          echo "- Artifacts: \`linux-*.deb\` for this board will be attached." >> release_info/kernel_summary_${{ matrix.BOARD }}.md
          echo "" >> release_info/kernel_summary_${{ matrix.BOARD }}.md # Newline for separation

      - name: "Upload Kernel Debs Artifact"
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: kernel-debs-${{ matrix.BOARD }}
          path: build/output/debs/linux-*.deb
          if-no-files-found: error

      - name: "Upload Kernel Summary Artifact"
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: kernel-summary-${{ matrix.BOARD }}
          path: release_info/kernel_summary_${{ matrix.BOARD }}.md

      - name: "Upload Kernel Worktree" 
        uses: actions/upload-artifact@v4
        with:
          name: kernel-worktree-${{ matrix.BOARD }}-${{ inputs.BRANCH }}
          path: build/cache/sources/linux-kernel-worktree
          if-no-files-found: error 

  Build_Armbian:
    needs: Build_Kernel
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false 
      matrix:
        BOARD: [ lemonpi, som3588-cat ] 
        RELEASE: [ oracular, plucky, bookworm, trixie ] 

    outputs:
      VERSIONOS: ${{ steps.set_env.outputs.VERSIONOS_VAL }}

    steps:
      - name: "Checkout Board Source"
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Checkout Build System"
        uses: actions/checkout@main
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build

      - name: "Checkout OS Source"
        uses: actions/checkout@main
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Download Kernel Worktree" 
        uses: actions/download-artifact@v4
        with:
          name: kernel-worktree-${{ matrix.BOARD }}-${{ inputs.BRANCH }}
          path: build/cache/sources/linux-kernel-worktree

      - name: "Set Image Env"
        id: set_env 
        shell: bash
        run: |
          # Update and clean the runner environment
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge || true

          # Set desktop related build flags
          if [[ "${{ inputs.DESKTOP }}" == "minimal" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="yes"" >> $GITHUB_ENV
          elif [[ "${{ inputs.DESKTOP }}" == "server" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
          else
            echo "BUILD_DESKTOP="yes"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT="${{ inputs.DESKTOP }}"" >> $GITHUB_ENV
            echo "DESKTOP_APPGROUPS_SELECTED="browsers"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base"" >> $GITHUB_ENV
          fi

          # Set versioning environment variables
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV
          VERSIONOS_VALUE=$(cat build/VERSION)
          echo "VERSIONOS=${VERSIONOS_VALUE}" >> $GITHUB_ENV
          echo "VERSIONOS_VAL=${VERSIONOS_VALUE}" >> $GITHUB_OUTPUT # 设置步骤输出

          # Prepare user patches and board files
          mkdir -p ./build/userpatches
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches

          # Add board maintainer to CODEOWNERS (optional, if needed for this structure)
          sed -i '75i config/boards/${{ matrix.BOARD }}.conf		@YANXIAOXIH' ./build/.github/CODEOWNERS

      - name: "Compile Image: ${{ matrix.BOARD }} (${{ matrix.RELEASE }})" 
        shell: bash
        run: |
          cd ./build
          ./compile.sh \
            BOARD="${{ matrix.BOARD }}" \
            BRANCH="${{ inputs.BRANCH }}" \
            RELEASE="${{ matrix.RELEASE }}" \
            KERNEL_CONFIGURE="no" \
            BUILD_DESKTOP="${{ env.BUILD_DESKTOP }}" \
            BUILD_MINIMAL="${{ env.BUILD_MINIMAL }}" \
            DESKTOP_ENVIRONMENT="${{ env.DESKTOP_ENVIRONMENT }}" \
            DESKTOP_APPGROUPS_SELECTED="${{ env.DESKTOP_APPGROUPS_SELECTED }}" \
            DESKTOP_ENVIRONMENT_CONFIG_NAME="${{ env.DESKTOP_ENVIRONMENT_CONFIG_NAME }}" \
            ENABLE_EXTENSIONS="${{ inputs.ENABLE_EXTENSIONS || ' '  }}" \
            BOARD_FIRMWARE_INSTALL="-full" \
            SHARE_LOG="yes" \
            BETA="${{ inputs.nightly }}" \
            PREFER_DOCKER="${{ inputs.DOCKER }}" \
            ROOTFS_TYPE="${{ inputs.ROOTFS }}" \
            EXPERT="yes" \
            VENDOR=Armbian \
            IMAGE_XZ_COMPRESSION_RATIO=8 \
            COMPRESS_OUTPUTIMAGE=sha,gpg,xz


      - name: "Create Image Build Summary"
        if: success()
        run: |
          mkdir -p release_info
          echo "### Image: ${{ matrix.BOARD }} - ${{ matrix.RELEASE }} (${{ inputs.DESKTOP }})" > release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md
          echo "- Board: ${{ matrix.BOARD }}" >> release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md
          echo "- Kernel Branch Used: ${{ inputs.BRANCH }}" >> release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md
          echo "- OS Release: ${{ matrix.RELEASE }}" >> release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md
          echo "- Desktop: ${{ inputs.DESKTOP }}" >> release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md
          echo "- RootFS: ${{ inputs.ROOTFS }}" >> release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md
          echo "- Artifacts: Images, sha sums, gpg sigs for this build will be attached." >> release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md
          echo "" >> release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md # Newline for separation

      - name: "Upload Image Artifacts"
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: images-${{ matrix.BOARD }}-${{ matrix.RELEASE }}
          path: build/output/images/*
          if-no-files-found: error

      - name: "Upload Image Summary Artifact"
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: image-summary-${{ matrix.BOARD }}-${{ matrix.RELEASE }}
          path: release_info/image_summary_${{ matrix.BOARD }}_${{ matrix.RELEASE }}.md

  Publish_Release:
    needs: [Build_Kernel, Build_Armbian]
    runs-on: ubuntu-latest
    if: always() 

    steps:
      - name: "Checkout Build System" 
        uses: actions/checkout@main
        with:
          repository: armbian/build
          ref: main 
          path: armbian_build_meta 

      - name: "Set Version Env"
        id: version_env
        shell: bash
        run: |
          ARMBIAN_VERSION=$(cat armbian_build_meta/VERSION)
          echo "ARMBIAN_VERSION=${ARMBIAN_VERSION}" >> $GITHUB_ENV
          echo "ARMBIAN_VERSION_TAG=Armbian_V${ARMBIAN_VERSION}" >> $GITHUB_ENV
          echo "Generated tag: Armbian_V${ARMBIAN_VERSION}"

      - name: "Download all build artifacts"
        uses: actions/download-artifact@v4

      - name: "Assemble Release Body"
        shell: bash
        run: |
          echo "Assembling release body from downloaded summaries..."
          BODY_FILE="release_body.md"

          # Start with a common header (can be HTML or Markdown)
          # Using Markdown for simplicity as GitHub renders it well.
          cat > ${BODY_FILE} <<EOF
          <p align='center'>
          <a href='https://www.armbian.com'>
          <img src='https://github.com/armbian/build/blob/main/.github/armbian-logo.png?raw=true' width='150'></a></p>
          <h1 align=center>Armbian OS - Version ${{ env.ARMBIAN_VERSION }}</h1>
          <p align='center'>
          <a href='https://www.armbian.com'><img alt='Armbian Linux stable' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20current&query=CURRENT&color=f71000&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
          <a href='https://www.armbian.com'><img alt='Armbian Linux rolling' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20edge&query=EDGE&color=34be5b&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
          </p>
          <br>

          This release includes the following builds:

          ## Kernel Packages
          EOF

          # Append kernel summaries
          # download-artifact v4 puts files in a subdirectory named after artifact.
          # e.g. kernel-summary-lemonpi/kernel_summary_lemonpi.md
          find ./kernel-summary-* -name '*.md' -print0 | sort -z | xargs -0 -I {} sh -c 'cat "{}"; echo ""' >> ${BODY_FILE}

          echo "" >> ${BODY_FILE} # Extra newline
          echo "## OS Images" >> ${BODY_FILE}

          # Append image summaries
          find ./image-summary-* -name '*.md' -print0 | sort -z | xargs -0 -I {} sh -c 'cat "{}"; echo ""' >> ${BODY_FILE}

          # Common footer
          cat >> ${BODY_FILE} <<EOF

          <br>
          ---
          **General Information:**
          - Inputs Branch: \`${{ github.event.inputs.BRANCH }}\`
          - Inputs Desktop: \`${{ github.event.inputs.DESKTOP }}\`
          - Inputs Extensions: \`${{ github.event.inputs.ENABLE_EXTENSIONS }}\`
          - Inputs Nightly: \`${{ github.event.inputs.nightly }}\`
          - RootFS Type: \`${{ github.event.inputs.ROOTFS }}\`
          - Verification: sha256sum (included with images)

          Please note that Armbian Rolling Releases (\`nightly=yes\`) are not recommended for production environments, as these builds are not thoroughly tested. However, in most cases, they should work well.
          <br>
           
          EOF

          echo "Final Release Body (${BODY_FILE}):"
          cat ${BODY_FILE}

      - name: "Publish Release with all Artifacts"
        uses: ncipollo/release-action@main
        with:
          tag: ${{ env.ARMBIAN_VERSION_TAG }}
          name: ${{ env.ARMBIAN_VERSION_TAG }}
          artifacts: "./kernel-debs-*/*.deb,./images-*/*"
          allowUpdates: true
          removeArtifacts: false # Keep old artifacts if any with same name (e.g. if a specific board build is re-run)
          replacesArtifacts: true # Replace if artifact name matches
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "release_body.md"
          draft: false # Set to true if you want to review before publishing
          prerelease: ${{ github.event.inputs.nightly == 'yes' }} # Mark as prerelease if nightly
