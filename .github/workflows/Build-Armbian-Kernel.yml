name: "Armbian Build Kernel Image"
on:
  workflow_dispatch:
    inputs:

      # --- Build Configuration ---
      DESKTOP:
        type: choice
        description: "Desktop environment"
        options:
        - minimal
        - server
        - gnome
        - budgie
        - cinnamon
        - i3-wm
        - kde-neon
        - kde-plasma
        - mate
        - xfce
        - xmonad
        default: 'server'

      ENABLE_EXTENSIONS:
        type: choice
        description: "Armbian extension packages"
        options: [ 'mesa-vpu', ' ' ]
        default: " "

      DOCKER:
        type: choice
        description: "Build type: yes = Docker, no = Actions"
        required: false
        options: [ 'yes', 'no' ]
        default: 'no'
      
      nightly:
        description: "Build type: yes = nightly, no = stable"
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      ROOTFS:
        type: choice
        description: "Root filesystem"
        options:
        - ext4
        - btrfs
        default: 'ext4'

jobs:
  # ====================================================================
  # JOB 1: Build Kernel Packages
  # ====================================================================
  Build_Kernel:
    name: "Build Kernel [${{ matrix.BOARD }} ${{ matrix.BRANCH }}]"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        BOARD: [lemonpi, som3588-cat]
        BRANCH: [edge, vendor]

    steps:
      - name: "Checkout Board Source"
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Checkout Build System"
        uses: actions/checkout@main
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build

      - name: "Checkout OS Source" 
        uses: actions/checkout@main
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Setup Kernel Build Environment"
        shell: bash
        run: |
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge && sudo -E apt-get -qq clean
          sudo dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge || true
          mkdir -p ./build/userpatches
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches

      - name: "Compile Kernel [${{ matrix.BOARD }} ${{ matrix.BRANCH }}]"
        shell: bash
        run: |
          cd ./build
          ./compile.sh \
            BOARD="${{ matrix.BOARD }}" \
            BRANCH="${{ matrix.BRANCH }}" \
            RELEASE="bookworm" \
            KERNEL_CONFIGURE="no" \
            BUILD_DESKTOP="no" \
            BUILD_MINIMAL="yes" \
            SHARE_LOG="yes" \
            BETA="${{ inputs.nightly }}" \
            PREFER_DOCKER="${{ inputs.DOCKER }}" \
            EXPERT="yes" \
            VENDOR=Armbian

      - name: "Upload Kernel Artifact"
        # Upload raw kernel packages with full version names for the next job.
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs-${{ matrix.BOARD }}-${{ matrix.BRANCH }}
          path: build/output/debs/*.deb
          if-no-files-found: error

  # ====================================================================
  # JOB 2: Build Armbian Image
  # ====================================================================
  Build_Image:
    name: "Build Image [${{ matrix.BOARD }} ${{ matrix.BRANCH }} ${{ matrix.RELEASE }}]
    needs: Build_Kernel
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BOARD: [ lemonpi, som3588-cat ]
        BRANCH: [ edge, vendor ]
        RELEASE: [ oracular, plucky, bookworm, trixie ]
    steps:
      - name: "Checkout Board Source"
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Checkout Build System"
        uses: actions/checkout@main
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build

      - name: "Checkout OS Source"
        uses: actions/checkout@main
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Download Kernel Artifact"
        # Download the pre-built kernel packages from the previous job.
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs-${{ matrix.BOARD }}-${{ matrix.BRANCH }}
          path: ./prebuilt-kernel-debs

      - name: "Setup Image Build Environment"
        # Configure build flags and copy the pre-built kernel into the build directory.
        shell: bash
        run: |
          # Update and clean the runner environment
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge || true

          # Set desktop related build flags
          if [[ "${{ inputs.DESKTOP }}" == "minimal" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="yes"" >> $GITHUB_ENV
          elif [[ "${{ inputs.DESKTOP }}" == "server" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
          else
            echo "BUILD_DESKTOP="yes"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT="${{ inputs.DESKTOP }}"" >> $GITHUB_ENV
            echo "DESKTOP_APPGROUPS_SELECTED="browsers"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base"" >> $GITHUB_ENV
          fi

          # Set versioning environment variables
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV
          echo "VERSIONOS=$(cat build/VERSION)" >> $GITHUB_ENV

          ## Set version override if provided
          cat "os/nightly.json" | jq '.version' | sed "s/\"//g" | sed 's/^/ARMBIAN_VERSION=/' >> $GITHUB_ENV
         
          # Prepare user patches and board files
          mkdir -p ./build/userpatches ./build/output/debs
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches
          cp -v ./prebuilt-kernel-debs/*.deb ./build/output/debs/

      - name: "Compile Image [${{ matrix.BOARD }} ${{ matrix.RELEASE }}]"
        shell: bash
        run: |
          cd ./build
          ./compile.sh \
            REVISION="${{ env.ARMBIAN_VERSION }}" \
            BOARD="${{ matrix.BOARD }}" \
            BRANCH="${{ matrix.BRANCH }}" \
            RELEASE="${{ matrix.RELEASE }}" \
            KERNEL_CONFIGURE="no" \
            kernel="no" \
            BUILD_DESKTOP="${{ env.BUILD_DESKTOP }}" \
            BUILD_MINIMAL="${{ env.BUILD_MINIMAL }}" \
            DESKTOP_ENVIRONMENT="${{ env.DESKTOP_ENVIRONMENT }}" \
            DESKTOP_APPGROUPS_SELECTED="${{ env.DESKTOP_APPGROUPS_SELECTED }}" \
            DESKTOP_ENVIRONMENT_CONFIG_NAME="${{ env.DESKTOP_ENVIRONMENT_CONFIG_NAME }}" \
            ENABLE_EXTENSIONS="${{ inputs.ENABLE_EXTENSIONS || ' '  }}" \
            BOARD_FIRMWARE_INSTALL="-full" \
            SHARE_LOG="yes" \
            BETA="${{ inputs.nightly }}" \
            PREFER_DOCKER="${{ inputs.DOCKER }}" \
            ROOTFS_TYPE="${{ inputs.ROOTFS }}" \
            EXPERT="yes" \
            VENDOR=Armbian \
            IMAGE_XZ_COMPRESSION_RATIO=8 \
            COMPRESS_OUTPUTIMAGE=sha,gpg,xz

      - name: "Upload Image Artifact"
        # Upload the final image files (.img.xz, .sha, .gpg) as an artifact.
        uses: actions/upload-artifact@v4
        with:
          name: armbian-image-${{ matrix.BOARD }}-${{ matrix.RELEASE }}
          path: build/output/images/*
          if-no-files-found: error

  # ====================================================================
  # JOB 3: Publish GitHub Release
  # ====================================================================
  Publish_Release:
    name: "Publish GitHub Release"
    runs-on: ubuntu-latest
    needs: [Build_Kernel, Build_Image]
    if: success() # Only run if all build jobs succeed.

    steps:
      - name: "Download All Artifacts"
        # Collect all kernel and image artifacts from previous jobs.
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: "Checkout OS System for Version"
        # Needed to read the Armbian version file for the release tag.
        uses: actions/checkout@main
        with:
          repository: armbian/os
          ref: main
          path: os

      - name: "Rename Kernel DEBs for Release"
        # CRITICAL: Rename kernel debs to remove version suffixes for a clean release page.
        run: |
          echo "Searching for kernel packages in artifacts subdirectories..."
          find artifacts -name 'linux-*.deb' -type f -print -execdir bash -c '
            old_name="$1"
            # 你的重命名逻辑
            new_name=$(echo "$old_name" | sed -E "s/(linux-.*__[0-9]+\.[0-9]+\.[0-9]+)-.*(\.deb)$/\1..\2/")
            if [[ "$old_name" != "$new_name" ]]; then
              mv -v "$old_name" "$new_name"
              echo "Renamed '\''$old_name'\'' to '\''$new_name'\''"
            else
              echo "Filename '\''$old_name'\'' did not match pattern or is already renamed."
            fi
          ' bash {} \;
          echo "Listing final artifacts structure:"
          ls -R artifacts
          
      - name: "Generate Release Body"
        # Create a single, consolidated body.html for the release notes.
        id: generate_body
        shell: bash
        run: |
          VERSIONOS=$(jq -r '.version' os/nightly.json)
          echo "VERSIONOS=${VERSIONOS}" >> $GITHUB_ENV
          echo "Release version set to: ${VERSIONOS}"

          # Use HEREDOC to create the release body
          cat > body.html <<EOF
          <p align='center'><a href='https://www.armbian.com'><img src='https://github.com/armbian/build/blob/main/.github/armbian-logo.png?raw=true' width='150'></a></p>
          <h1 align=center>Armbian OS - Build V${VERSIONOS}</h1>
          <p align='center'>
            <a href='https://www.armbian.com'><img alt='Armbian Linux stable' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20current&query=CURRENT&color=f71000&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
            <a href='https://www.armbian.com'><img alt='Armbian Linux rolling' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20edge&query=EDGE&color=34be5b&cacheSeconds=600&style=for-the-badge&url=https://github.com/armbian/scripts/releases/download/status/runners_capacity.json'></a>
          </p>

          ## 🚀 Build Summary
          *   **Kernel Branch:** \`${{ inputs.BRANCH }}\`
          *   **Desktop:** \`${{ inputs.DESKTOP }}\`
          *   **Filesystem:** \`${{ inputs.ROOTFS }}\`
          *   **Build Type:** \`${{ inputs.nightly == 'yes' && 'Nightly' || 'Stable' }}\`

          ---
          ## 📦 Artifacts
          This release contains kernel packages and full OS images for the following configurations. All artifacts are verified with `sha256sum`, and images also include a `.gpg` signature.

          ### Kernel Packages (`${{ inputs.BRANCH }}` branch)
          - `lemonpi`
          - `som3588-cat`

          ### Armbian Images
          - **Board:** `lemonpi` & `som3588-cat`
            - **OS Releases:** `oracular`, `plucky`, `bookworm`, `trixie`
          <br>
          > **Note:** Rolling releases are not recommended for production environments.
          EOF
          
          # Set the path for all artifacts to be uploaded
          echo "ARTIFACT_PATH=artifacts/*/*" >> $GITHUB_OUTPUT

      - name: "Publish to GitHub Release"
        # Upload all artifacts (renamed kernels + images) to a single release.
        uses: ncipollo/release-action@main
        with:
          tag: "Armbian_V${{ env.VERSIONOS }}"
          name: "Armbian_V${{ env.VERSIONOS }}"
          artifacts: "${{ steps.generate_body.outputs.ARTIFACT_PATH }}" 
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "body.html" 
