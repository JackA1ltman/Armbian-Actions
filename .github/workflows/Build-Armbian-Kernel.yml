name: "Armbian Build Kernel Image"
on:

  schedule:
   - cron: '0 1 * * *'

  workflow_dispatch:
    inputs:
      DESKTOP:
        type: choice
        description: "Desktop environment"
        options:
        - minimal
        - server
        - gnome
        - budgie
        - cinnamon
        - i3-wm
        - kde-neon
        - kde-plasma
        - mate
        - xfce
        - xmonad
        default: 'server'

      ENABLE_EXTENSIONS:
        type: choice
        description: "Armbian extension packages"
        options: [ 'mesa-vpu', ' ' ]
        default: " "

      DOCKER:
        type: choice
        description: "Build type: yes = Docker, no = Actions"
        required: false
        options: [ 'yes', 'no' ]
        default: 'no'
      
      nightly:
        description: "Build type: yes = nightly, no = stable"
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      ROOTFS:
        type: choice
        description: "Root filesystem"
        options:
        - ext4
        - btrfs
        default: 'ext4'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  RELEASES: "oracular plucky bookworm trixie"

jobs:
  # ====================================================================
  # JOB 0: Setup Parameters based on Trigger Type
  # ====================================================================
  Setup_Parameters:
    name: "Setup Build Parameters"
    runs-on: ubuntu-latest
    outputs:
      desktop: ${{ github.event_name == 'schedule' && 'server' || inputs.DESKTOP }}
      nightly: ${{ github.event_name == 'schedule' && 'no' || inputs.nightly }}
      docker: ${{ github.event_name == 'schedule' && 'no' || inputs.DOCKER }}
      rootfs: ${{ github.event_name == 'schedule' && 'ext4' || inputs.ROOTFS }}
      enable_extensions: ${{ github.event_name == 'schedule' && ' ' || inputs.ENABLE_EXTENSIONS }}
    steps:
      - name: "Log effective parameters"
        run: |
          echo "Trigger: ${{ github.event_name }}"
          echo "Desktop: ${{ github.event_name == 'schedule' && 'server' || inputs.DESKTOP }}"
          echo "Nightly: ${{ github.event_name == 'schedule' && 'no' || inputs.nightly }}"
          echo "Docker: ${{ github.event_name == 'schedule' && 'no' || inputs.DOCKER }}"
          echo "RootFS: ${{ github.event_name == 'schedule' && 'ext4' || inputs.ROOTFS }}"
          echo "Extensions: ${{ github.event_name == 'schedule' && ' ' || inputs.ENABLE_EXTENSIONS }}"

  # ====================================================================
  # JOB 1: Build Kernel Packages
  # ====================================================================
  Build_Kernel:
    needs: Setup_Parameters
    name: "Build Kernel [${{ matrix.BOARD }} ${{ matrix.BRANCH }}]"
    runs-on: ubuntu-22.04
    timeout-minutes: 150
    strategy:
      fail-fast: false
      matrix:
        BOARD: [lemonpi, som3588-cat]
        BRANCH: [edge, vendor]

    steps:

      - name: "Checkout Board Source"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Checkout Build System"
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build

      - name: "Checkout OS Source" 
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Setup Kernel Build Environment"
        shell: bash
        run: |
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge && sudo -E apt-get -qq clean
          sudo dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge || true
          mkdir -p ./build/userpatches
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches

      - name: "Compile Kernel [${{ matrix.BOARD }} ${{ matrix.BRANCH }}]"
        shell: bash
        run: |
          cd ./build
          ./compile.sh \
            BOARD="${{ matrix.BOARD }}" \
            BRANCH="${{ matrix.BRANCH }}" \
            RELEASE="bookworm" \
            KERNEL_CONFIGURE="no" \
            BUILD_DESKTOP="no" \
            BUILD_MINIMAL="yes" \
            SHARE_LOG="yes" \
            BETA="${{ needs.Setup_Parameters.outputs.nightly }}" \
            PREFER_DOCKER="${{ needs.Setup_Parameters.outputs.docker }}" \
            EXPERT="yes" \
            VENDOR=Armbian

      - name: "Upload Kernel Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs-${{ matrix.BOARD }}-${{ matrix.BRANCH }}
          path: build/output/debs/*.deb
          if-no-files-found: error

  # ====================================================================
  # JOB 2: Build Armbian Image
  # ====================================================================
  Build_Image:
    name: "Build Image [${{ matrix.BOARD }} ${{ matrix.BRANCH }} ${{ matrix.RELEASE }}]"
    needs: [Setup_Parameters, Build_Kernel]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BOARD: [ lemonpi, som3588-cat ]
        BRANCH: [ edge, vendor ]
        RELEASE: ${{ split(env.RELEASES, ' ') }}

    steps:
      - name: "Checkout Board Source"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Checkout Build System"
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build

      - name: "Checkout OS Source"
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Download Kernel Artifact"
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs-${{ matrix.BOARD }}-${{ matrix.BRANCH }}
          path: ./prebuilt-kernel-debs

      - name: "Setup Image Build Environment"
        shell: bash
        run: |
          # Update and clean the runner environment
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge && sudo -E apt-get -qq clean
          
          # Set desktop related build flags
          if [[ "${{ needs.Setup_Parameters.outputs.desktop }}" == "minimal" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="yes"" >> $GITHUB_ENV
          elif [[ "${{ needs.Setup_Parameters.outputs.desktop }}" == "server" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
          else
            echo "BUILD_DESKTOP="yes"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT="${{ needs.Setup_Parameters.outputs.desktop }}"" >> $GITHUB_ENV
            echo "DESKTOP_APPGROUPS_SELECTED="browsers"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base"" >> $GITHUB_ENV
          fi

          # Set versioning environment variables
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV
          echo "VERSIONOS=$(cat build/VERSION)" >> $GITHUB_ENV

          # Prepare user patches and board files
          mkdir -p ./build/userpatches ./build/output/debs
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches
          cp -v ./prebuilt-kernel-debs/*.deb ./build/output/debs/
          
      - name: "Import GPG Key for Signing Images"
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: "Compile Image [${{ matrix.BOARD }} ${{ matrix.RELEASE }}]"
        shell: bash
        run: |
          cd ./build
          ./compile.sh \
            BOARD="${{ matrix.BOARD }}" \
            BRANCH="${{ matrix.BRANCH }}" \
            RELEASE="${{ matrix.RELEASE }}" \
            KERNEL_CONFIGURE="no" \
            kernel="no" \
            BUILD_DESKTOP="${{ env.BUILD_DESKTOP }}" \
            BUILD_MINIMAL="${{ env.BUILD_MINIMAL }}" \
            DESKTOP_ENVIRONMENT="${{ env.DESKTOP_ENVIRONMENT }}" \
            DESKTOP_APPGROUPS_SELECTED="${{ env.DESKTOP_APPGROUPS_SELECTED }}" \
            DESKTOP_ENVIRONMENT_CONFIG_NAME="${{ env.DESKTOP_ENVIRONMENT_CONFIG_NAME }}" \
            ENABLE_EXTENSIONS="${{ needs.Setup_Parameters.outputs.enable_extensions }}" \
            SHARE_LOG="yes" \
            BETA="${{ needs.Setup_Parameters.outputs.nightly }}" \
            PREFER_DOCKER="${{ needs.Setup_Parameters.outputs.docker }}" \
            ROOTFS_TYPE="${{ needs.Setup_Parameters.outputs.rootfs }}" \
            EXPERT="yes" \
            VENDOR=Armbian \
            COMPRESS_OUTPUTIMAGE=sha,gpg,xz

      - name: "Upload Image Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: armbian-image-${{ matrix.BOARD }}-${{ matrix.BRANCH }}-${{ matrix.RELEASE }}
          path: build/output/images/*
          if-no-files-found: error
          
      - name: "Record Matrix Info"
        shell: bash
        run: |
          echo "${{ matrix.BOARD }},${{ matrix.BRANCH }}" > matrix-info.txt

      - name: "Upload Matrix Info Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: matrix-info-${{ matrix.BOARD }}-${{ matrix.BRANCH }}
          path: matrix-info.txt

  # ====================================================================
  # JOB 3: Publish GitHub Release
  # ====================================================================
  Publish_Release:
    name: "Publish GitHub Release"
    runs-on: ubuntu-latest
    needs: [Setup_Parameters, Build_Image]
    if: success()

    steps:
      - name: "Download All Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: "Checkout Build System for Version"
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          ref: main
          path: build

      - name: "Rename Kernel DEBs for Release"
        shell: bash
        run: |
          set -eo pipefail
          echo "--- Simplifying linux-*.deb filenames for release ---"
          
          find artifacts/kernel-debs-*/ -type f -name 'linux-*.deb' | while read -r filepath; do
            dir=$(dirname "$filepath"); old_name=$(basename "$filepath")
            new_name=$(echo "$old_name" | sed -E 's/^(.*__[0-9.]+).*\.deb$/\1.deb/')
            if [[ "$old_name" != "$new_name" ]]; then mv -v "$filepath" "$dir/$new_name"; fi
          done
          
          echo "--- Final list of kernel packages after simplification ---"
          ls -R artifacts/kernel-debs-*/
          
      - name: "Generate Release Body"
        id: generate_body
        shell: bash
        run: |
          echo "VERSIONOS=$(cat build/VERSION)" >> $GITHUB_ENV

          BUILT_BOARDS=$(cat artifacts/matrix-info*/*.txt | cut -d',' -f1 | sort -u | paste -sd ', ' -)
          BUILT_BRANCHES=$(cat artifacts/matrix-info*/*.txt | cut -d',' -f2 | sort -u | paste -sd ', ' -)
          
          echo "
            <p align='center'>
            <a href='https://www.armbian.com'>
            <img src='https://github.com/armbian/build/blob/main/.github/armbian-logo.png?raw=true' width='150'></a></p>
            <h1 align=center>Armbian OS</h1>
            <p align=center>
            <a href='https://www.armbian.com'><img alt='Armbian Linux stable' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20current&query=CURRENT&color=f71000&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
            <a href='https://www.armbian.com'><img alt='Armbian Linux rolling' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20edge&query=EDGE&color=34be5b&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
            </p>
            <br>

            - **Board**: ${BUILT_BOARDS}
            - **Kernel**: ${BUILT_BRANCHES}
            - **Desktop**: ${{ needs.Setup_Parameters.outputs.desktop }}
            - **Build Type**: ${{ needs.Setup_Parameters.outputs.nightly == 'yes' && 'Nightly' || 'Stable' }}
            - **Verification**: sha256sum 

            <br>
            Please note that Armbian Rolling Releases are not recommended for production environments, as these builds are not thoroughly tested. However, in most cases, they should work well. 

            <br>
             
            </p>" > body.html

      - name: "Publish to GitHub Release"
        uses: ncipollo/release-action@v1
        with:
          tag: "Armbian_V${{ env.VERSIONOS }}"
          name: "Armbian_V${{ env.VERSIONOS }}"
          artifacts: |
            artifacts/armbian-image*/**/*
            artifacts/kernel-debs-*/linux-*.deb
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "body.html"
          makeLatest: true

  # ====================================================================
  # JOB 4: Update APT Repository
  # ====================================================================
  Update_APT_Repo:
    name: "Update APT Repository"
    runs-on: ubuntu-latest
    needs: [Setup_Parameters, Publish_Release]
    if: success()

    steps:
      - name: "Download all kernel DEB packages"
        uses: actions/download-artifact@v4
        with:
          pattern: kernel-debs-*
          path: artifacts/debs

      - name: "Import GPG Key"
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: "Install APT repository tools"
        run: sudo apt-get update && sudo apt-get install -y reprepro

      - name: "Setup APT Repository Structure for Multiple Distributions"
        shell: bash
        run: |
          mkdir -p repo/conf
          > repo/conf/distributions
          for codename in $RELEASES; do
            echo "Generating config for $codename..."
            cat <<EOF >> repo/conf/distributions
          Origin: My Armbian Builds
          Label: My Armbian
          Codename: ${codename}
          Architectures: arm64
          Components: main
          Description: Custom APT repository for my Armbian builds
          SignWith: ${{ secrets.GPG_SIGNING_KEY_ID }}

          EOF
          done
          echo "--- Final distributions config ---"
          cat repo/conf/distributions

      - name: "Add specific DEB packages to each distribution"
        shell: bash
        run: |
          for codename in $RELEASES; do
            echo "--- Processing packages for distribution: ${codename} ---"
            
            local branch_to_add=""
            if [[ "$codename" == "bookworm" ]]; then
              branch_to_add="vendor"
            else
              branch_to_add="edge"
            fi
            
            echo "Will add '${branch_to_add}' kernel packages to '${codename}'."

            find artifacts/debs -path "*/kernel-debs-*-${branch_to_add}/*" -name '*.deb' -print0 | \
              xargs -0 -r -I {} reprepro -b repo/ -V includedeb ${codename} {}

            if [ $? -ne 0 ]; then
                echo "Warning: reprepro might have failed to add packages for ${codename}."
            elif ! find artifacts/debs -path "*/kernel-debs-*-${branch_to_add}/*" -name '*.deb' | read; then
                echo "Info: No .deb files found for branch '${branch_to_add}'."
            fi
          done

      - name: "Deploy repository to GitHub Pages"
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
          force_orphan: true
